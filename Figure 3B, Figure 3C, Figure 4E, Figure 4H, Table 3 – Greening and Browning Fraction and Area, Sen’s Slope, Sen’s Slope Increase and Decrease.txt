Figure 3B, Figure 3C, Figure 4E, Figure 4H, Table 3 – Greening and Browning Fraction and Area, Sen’s Slope, Sen’s Slope Increase and Decrease

// Danau Sentarum as an Example. Please change the study area accordingly
var table = ee.FeatureCollection('WCMC/WDPA/current/polygons')
  .filter(ee.Filter.inList('NAME', ['Danau Sentarum']));
  
Map.setOptions('SATELLITE');
Map.centerObject(table, 8);
Map.addLayer(table, {}, 'Study Area')

// Get MODIS 250m vegetation data.
var mod13 = ee.ImageCollection('MODIS/006/MOD13Q1');

// ee.Filter.calendarRange(10, 3, 'month') can be adjusted to reflect rainy, dry, or all seasons
var mod13Summer = mod13.filter(ee.Filter.calendarRange(1, 12, 'month'))
  .filter(ee.Filter.calendarRange(2000, 2022, 'year'))
  .map(function(img) {
    return img.set('year', img.date().get('year'));
  });

// print('mod13Summer', mod13Summer);

// Generate lists of images from the year using a join.
var mod13SummerAnnualJoin = ee.Join.saveAll('same_year').apply({
  primary: mod13Summer.distinct('year'),
  secondary: mod13Summer,
  condition: ee.Filter.equals({leftField: 'year', rightField: 'year'})
});

// print('mod13SummerAnnualJoin',mod13SummerAnnualJoin);

// Calculate annual max EVI composite images from then "same year" join lists.
// Return an image with two bands for use in time series slope calculation;
// year as band 1, max EVI as band 2.
var summerStats = ee.ImageCollection(mod13SummerAnnualJoin.map(function(img) {
  var year = img.get('year');
  var yearCol = ee.ImageCollection.fromImages(img.get('same_year'));
  var max = yearCol.select('EVI').max();
  var yr = ee.Image.constant(ee.Number(year)).toShort();
  return ee.Image.cat(yr, max).rename(['year', 'max']).set('year', year);
}));

// Calculate time series slope using sensSlope().
var sens = summerStats.reduce(ee.Reducer.sensSlope());
var sens_slope = sens.select('slope').clip(table);

// increasing / decreasing sen's slope
var cond = ee.Image.cat(sens.select('slope').gt(0).rename('increase'),
                      sens.select('slope').lt(0).rename('decrease')).clip(table);

var increase = cond.select('increase').clip(table)
var decrease = cond.select('decrease').clip(table)

// -----------------
// Define a function to calculate a histogram of slope values to be calculated
// for each park; defining a custom histogram function instead of using
// ui.Chart.image.histogram because it does not allow baseline to be set as 0,
// which is important when evaluating positive and negative slope frequency.
function getHistogram(sensImg, geometry, title) {
  // Calculate histogram as an ee.Array table.
  var hist = sensImg.select('slope').reduceRegion({
    reducer: ee.Reducer.autoHistogram(),
    geometry: geometry,
    scale: 250,
    maxPixels: 1e13,
  });

  // Get the array and extract the bin column and pixel count columns.
  var histArray = ee.Array(hist.get('slope'));
  var binBottom = histArray.slice(1, 0, 1);
  var nPixels = histArray.slice(1, 1, null);

  // Chart the two arrays using the `ui.Chart.array.values` function.
  var histColumnFromArray =
    ui.Chart.array.values({array: nPixels, axis: 0, xLabels: binBottom})
      .setChartType('LineChart')
      .setOptions({
        title: title + ' forest condition trend histogram',
        hAxis: {title: 'Slope'},
        vAxis: {title: 'Pixel count'},
        pointSize: 0,
        lineSize: 2,
        colors: ['1b7837'],
        legend: {position: 'none'}
      });

  return histColumnFromArray;
}

// Get the slope histogram charts and print them to the console per park.
print(getHistogram(sens, table, 'Taman Nasional'));
  
// Infer pixel-wise vegetation condition based on sign of the slope.
var cond = ee.Image.cat(sens.select('slope').gt(0).rename('greening'),
                        sens.select('slope').lt(0).rename('browning'));

// Calculate area under greening and browning in each national park.
var tableRes = cond.multiply(ee.Image.pixelArea())
                 .reduceRegions(table, ee.Reducer.sum(), 250);
                 
                 
// Format results of the greening and browning for use in a table; convert sq m
// to sq km and calculate fraction of each; add as feature properties.
tableRes = tableRes.map(function(feature) {
  var browningSqM = feature.getNumber('browning');
  var greeningSqM = feature.getNumber('greening');
  var forestSqM = feature.area();
  return feature.set({
    'Browning sq km': browningSqM.divide(1e6),
    'Browning fraction': browningSqM.divide(forestSqM),
    'Greening sq km': greeningSqM.divide(1e6),
    'Greening fraction': greeningSqM.divide(forestSqM),
  });
});

// Display area summary of vegetation condition as a table "chart".
print(ui.Chart.feature.byFeature(tableRes.select(['NAME', 'Browning sq km',
    'Browning fraction', 'Greening sq km', 'Greening fraction']),
    'NAME')
  .setChartType('Table'));
  

// Set visualisation parameters for greening and browning areas; display to map.
var visParams = {
  opacity: 1,
  bands: ['slope'],
  min: -55,
  max: 55,
  palette:
    ['8c510a', 'd8b365', 'f6e8c3', 'f5f5f5', 'd9f0d3', '7fbf7b', '1b7837']
};


// Plot trend in EVI data by national park and year.
print(ui.Chart.image
          .seriesByRegion({
            imageCollection: summerStats,
            regions: table,
            reducer: ee.Reducer.median(),
            band: 'max',
            scale: 250,
            xProperty: 'year',
            seriesProperty: 'NAME'
          })
          .setChartType('ScatterChart')
          .setOptions({
            title: 'Greening/browning trend in forest national parks',
            vAxis: {title: 'Median of max. summer EVI'},
            hAxis: {title: 'Year', format: '####'},
            lineWidth: 2,
            pointSize: 0,
            series: {0: {color: 'ff0000'}, 1: {color: '0000ff'}}
          }));
          
          
// Filter the collection for the VV product from the descending track
var collectionVV = ee.ImageCollection('COPERNICUS/S1_GRD')
    .filter(ee.Filter.eq('instrumentMode', 'IW'))
    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
    .filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING'))
    .filterBounds(table)
    .select(['VV']);
// print(collectionVV);

// Filter the collection for the VH product from the descending track
var collectionVH = ee.ImageCollection('COPERNICUS/S1_GRD')
    .filter(ee.Filter.eq('instrumentMode', 'IW'))
    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
    .filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING'))
    .filterBounds(table)
    .select(['VH']);
// print(collectionVH);

var VV = collectionVV.median();
// Adding the VV layer to the map
Map.addLayer(VV, {min: -14, max: -7}, 'VV', 0);

//Calculate the VH layer and add it
var VH = collectionVH.median();
Map.addLayer(VH, {min: -20, max: -7}, 'VH', 0);


// Create an empty image into which to paint the features, cast to byte.
var empty = ee.Image().byte();

// Paint all the polygon edges with the same number and width, display.
var outline = empty.paint({
  featureCollection: table,
  color: 1,
  width: 3
});
Map.addLayer(outline, {palette: 'FF0000'}, 'Taman Nasional',0);

Map.addLayer(sens.clipToCollection(table), visParams, 'Sen\'s slope',0);

//Export
Export.image.toDrive({
  image: cond,
  description: 'incr_decrease_sentarum',
  scale: 250,
  crs: 'EPSG:4326',
  region: table,
  folder: 'ee_demos',
  fileFormat: 'GeoTIFF',
  formatOptions: {
    cloudOptimized: true
  }
});

Export.image.toDrive({
  image: decrease,
  description: 'decrease_sentarum',
  scale: 250,
  crs: 'EPSG:4326',
  region: table,
  folder: 'ee_demos',
  fileFormat: 'GeoTIFF',
  formatOptions: {
    cloudOptimized: true
  }
});
 
Export.image.toDrive({
  image: sens_slope,
  description: 'senslope_sentarum',
  scale: 250,
  crs: 'EPSG:4326',
  region: table,
  folder: 'ee_demos',
  fileFormat: 'GeoTIFF',
  formatOptions: {
    cloudOptimized: true
  }
});